タスクの登録ができる
登録済みタスクの編集ができる
登録済みタスクの削除ができる
タスクを検索して表示できる
タスクのタイトルやプロジェクト、期限日などでソートできる
今日何をすればいいのかがわかる
どのプロジェクトを優先するかを指定してスケジューリングできる
タスクがどんな状態かがわかる
タスクの状態を変更できる
タスクの状態を変更したときに、そのタスクが所属するプロジェクトの進捗が変わる

今日のコンディションを確認してほしい
もし今日のコンディションが悪ければタスクの難易度や量を調整できる
もし今日のコンディションが悪ければタスクの締め切りを延ばすことができる


## 現状、何がネックになっているか
- タスクを設定しても、時間の見積もりが甘い
- それ故にタスクに取り掛かっても、時間が足りずにスケジュールがどんどん遅延する
- 複数のプロジェクトを同時進行しているため、どのプロジェクトを優先すべきかが分からなくなる
- 取り掛かり始めてからその方法が正しくないアプローチだと気づいたときにどうするべきか分からなくなる
- スケジュールが遅延していくと別のプロジェクトに手を出してしまい、結局プロジェクトがドロップアウトしてしまう

## これからどうしたいか
- 一つ一つプロジェクトをやり遂げていきたい
- もちろんその後のメンテナンスとかも計画立ててやっていきたい
- ただ、複数プロジェクトをある程度並行して進めていかざるを得ない
- そのために、タスクを動的に管理していく

## 必要な機能
- 基本的なタスクのCRUD操作
- ルールベースでのタスクのスケジューリング
  - プロジェクトの優先順位、タスクの親子関係、緊急度、難易度、工数とか
- 今日のコンディションでのその日のタスクの難易度や量の調整
- アシスタントによるタスクの進捗確認とそれを踏まえたスケジュールの調整提案
- 過去の実績工数と見積もり工数の差異を踏まえた工数見積もりの精度向上(BERTで類似度計算？)
- タスクにタグを設定できる機能
- タスクの登録時にBERTでタスクの内容からタグや優先度、見積もり工数などをサジェストする機能
- 気軽にアシスタントと雑談ができるチャットUI
- ラバーダックデバッグの相手としてのアシスタント機能
- 大きいタスクを小さいタスクに分割してくれる機能

## その他制約
- データベースは簡単にSQLiteで実装する
- UIは最初はTkinterで実装して、もし有志の方がいればフロントエンド技術で実装してもらう
- バックエンドはPythonで実装する
- アーキテクチャはMVCを採用する
- TDDで実装する